{"version":3,"sources":["components/Tab.js","components/Tabs.js","App.js","reportWebVitals.js","index.js"],"names":["Tab","onClick","props","label","console","log","this","activeTab","className","Component","Tabs","onClickTabItem","tab","setState","state","children","map","child","App","onChange","bind","onClickCompile","event","input","target","value","xhr","XMLHttpRequest","addEventListener","responseText","startsWith","header","implementation","split","open","setRequestHeader","send","rows","cols","id","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c252c88a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass Tab extends Component {\r\n    static propTypes = {\r\n        activeTab: PropTypes.string.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        onClick: PropTypes.func.isRequired,\r\n    };\r\n  \r\n    onClick = () => {\r\n        const { label, onClick } = this.props;\r\n        onClick(label);\r\n    }\r\n  \r\n    render() {\r\n        console.log(\"Tab.render\")\r\n        const {\r\n            onClick,\r\n            props: {\r\n                activeTab,\r\n                label,\r\n            },\r\n        } = this;\r\n\r\n        let className = 'tab-list-item';\r\n\r\n        if (activeTab === label) {\r\n            className += ' tab-list-active';\r\n        }\r\n\r\n        return (\r\n            <li className={className}\r\n                onClick={onClick}>\r\n                {label}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n  \r\nexport default Tab;\r\n  ","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Tab from './Tab';\r\n\r\nclass Tabs extends Component {\r\n    static propTypes = {\r\n        children: PropTypes.instanceOf(Array).isRequired,\r\n    }\r\n  \r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            activeTab: this.props.children[0].props.label,\r\n        };\r\n    }\r\n  \r\n    onClickTabItem = (tab) => {\r\n        this.setState({ activeTab: tab });\r\n    } \r\n    \r\n    render() {\r\n        console.log(\"Tabs.render\")\r\n        const {\r\n            onClickTabItem,\r\n            props: {\r\n                children,\r\n            },\r\n            state: {\r\n                activeTab,\r\n            }\r\n        } = this;\r\n    \r\n        return (\r\n            <div className=\"tabs\">\r\n                <ol className=\"tab-list\">\r\n                    {children.map((child) => {\r\n                        const { label } = child.props;\r\n            \r\n                        return (\r\n                            <Tab\r\n                                activeTab={activeTab}\r\n                                key={label}\r\n                                label={label}\r\n                                onClick={onClickTabItem}\r\n                            />\r\n                        );\r\n                    })}\r\n                </ol>\r\n                <div className=\"tab-content\">\r\n                    {children.map((child) => {\r\n                        if (child.props.label !== activeTab) return undefined;\r\n                        return child.props.children;\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n    \r\nexport default Tabs;\r\n","import './App.css';\r\nimport Tabs from \"./components/Tabs\"\r\nimport React, { Component } from 'react';\r\n\r\nconst defaultInput = \r\n`machine oven;\r\n\r\ninitial state closed {\r\n    on open -> open;\r\n    initial state idle {\r\n        on start -> cooking;\r\n    }\r\n    state cooking {\r\n        entry enable_heater;\r\n        on timeout -> idle;\r\n        exit disable_heater; \r\n    }\r\n}\r\n\r\nstate open {\r\n    on close -> closed;\r\n    on start error;\r\n}`\r\n\r\nclass App extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n        this.onChange = this.onChange.bind(this)\r\n        this.onClickCompile = this.onClickCompile.bind(this)\r\n    }\r\n    \r\n    onChange(event) {\r\n        this.setState({input: event.target.value})\r\n    }\r\n    \r\n    onClickCompile(event) {\r\n        const input = this.state?.input || \"\"\r\n        console.log(input)\r\n        \r\n        // create a new XMLHttpRequest\r\n        var xhr = new XMLHttpRequest()\r\n        // get a callback when the server responds\r\n        xhr.addEventListener('load', () => {\r\n            // update the state of the component with the result here\r\n            const responseText = xhr.responseText\r\n            if (responseText.startsWith(\"Exception\")) {\r\n                this.setState({header: responseText, implementation: responseText})\r\n            } else {\r\n                const header = responseText.split(\"***\")[0]\r\n                const implementation = responseText.split(\"***\")[1]\r\n                this.setState({header, implementation})\r\n            }\r\n        })\r\n        // open the request with the verb and the url\r\n        xhr.open('POST', 'https://us-central1-makina-308118.cloudfunctions.net/MakinaCompile')\r\n        xhr.setRequestHeader(\"Content-Type\", \"text/plain\")\r\n        // send the request\r\n        xhr.send(input)\r\n    }\r\n    \r\n    render() {\r\n        console.log(\"App.render\")\r\n        return (\r\n            <div>\r\n                <h1>Makina Demo</h1>\r\n                <Tabs> \r\n                    <div label=\"Input\"> \r\n                        <div className=\"input-container\">\r\n                            <textarea className=\"input\" rows=\"80\" \r\n                                    cols=\"80\" id=\"aboutDescription\" \r\n                                    onChange={this.onChange}\r\n                                    value={this.state?.input || defaultInput}/>\r\n                        </div>\r\n                        <button className=\"submit\" \r\n                                type=\"button\"\r\n                                onClick={this.onClickCompile}>Compile</button>\r\n                    </div> \r\n                    <div label=\"C Header\"> \r\n                        <textarea className=\"input\" rows=\"80\" \r\n                                        cols=\"80\" id=\"aboutDescription\" \r\n                                        value={this.state?.header || \"\"}/>\r\n                    </div> \r\n                    <div label=\"C Implementation\">\r\n                        <textarea className=\"input\" rows=\"80\" \r\n                                        cols=\"80\" id=\"aboutDescription\"\r\n                                        value={this.state?.implementation || \"\"}/>\r\n                    </div> \r\n                </Tabs> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}